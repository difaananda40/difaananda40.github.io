---
import { Image } from 'astro:assets';

interface Props {
  images?: Array<ImageMetadata>;
}

const { images } = Astro.props;
---

<div class="w-full max-w-7xl mx-auto">
  <div class="bg-[#19122e] dark:bg-white rounded-3xl flex flex-col border-2 border-[#19122e] dark:border-white overflow-hidden">
    <div class="flex items-center justify-between px-6 py-3 z-10 shadow">
      <div class="flex gap-1">
        <div class="w-3 h-3 bg-red-500 block rounded-full"></div>
        <div class="w-3 h-3 bg-yellow-500 block rounded-full"></div>
        <div class="w-3 h-3 bg-green-500 block rounded-full"></div>
      </div>
      <div class="hidden md:block">
        <input id="search-box" type="text" value="preview.dev" class="bg-[#251b44] dark:bg-gray-200/60 text-gray-200 dark:text-gray-600 px-2 py-1 text-center text-xs rounded-md focus:border-0 focus:outline-none tracking-wide" readonly />
      </div>
      <div class="text-gray-200 dark:text-gray-600 flex gap-1">
        <button id="prev-button" class="px-2 bg-[#251b44] dark:bg-gray-100 rounded-sm">{'<'}</button>
        <button id="next-button" class="px-2 bg-[#251b44] dark:bg-gray-100 rounded-sm">{'>'}</button>
      </div>
    </div>
    <div class="relative w-full aspect-video">
      {images?.map((image: ImageMetadata) => (
          <div class="w-full h-full slide absolute block">
            <Image src={image} alt="" class="w-full"  />
          </div>
       ))}
    </div>
  </div>
</div>
<script>
  document.addEventListener("astro:page-load", () => {
    let slideDuration = 0.5;
    let snapX: (value: number) => number;
    
    const slides = document.querySelectorAll(".slide") as NodeListOf<HTMLElement>;
    const prevButton = document.querySelector("#prev-button") as HTMLElement;
    const nextButton = document.querySelector("#next-button") as HTMLElement;
    const progressWrap = gsap.utils.wrap(0, 1);

    const numSlides = slides.length;

    if(numSlides > 1) {
      gsap.set(slides, {
        xPercent: (i: number) => i * 100
      });

      const wrap = gsap.utils.wrap(-100, (numSlides - 1) * 100);

      const animation = gsap.to(slides, {
        xPercent: "+=" + (numSlides * 100),
        duration: 1,
        ease: "none",
        paused: true,
        repeat: -1,
        modifiers: {
          xPercent: wrap
        }
      });

      const proxy = document.createElement("div");
      let slideAnimation = gsap.to({}, {});
      let slideWidth = 0;
      let wrapWidth = 0;
      resize();

      window.addEventListener("resize", resize);

      prevButton?.addEventListener("click", () => {
        animateSlides(1);
      });

      nextButton?.addEventListener("click", () => {
        animateSlides(-1);
      });

      function animateSlides(direction: number) {
        slideAnimation.kill();

        const x = snapX(gsap.getProperty(proxy, "x") as number + direction * slideWidth);

        slideAnimation = gsap.to(proxy, {
          x: x,
          duration: slideDuration,
          onUpdate: updateProgress,
        });
      }

      function updateProgress() {
        animation.progress(progressWrap((gsap.getProperty(proxy, "x") as number) / wrapWidth));
      }

      function resize() {
        const norm = (gsap.getProperty(proxy, "x") as number / wrapWidth) || 0;

        slideWidth = slides[0].offsetWidth;
        wrapWidth = slideWidth * numSlides;
        snapX = gsap.utils.snap(slideWidth);

        gsap.set(proxy, {
          x: norm * wrapWidth
        });

        animateSlides(0);
        slideAnimation.progress(1);
      }
    }
  }, { once: false });
</script>
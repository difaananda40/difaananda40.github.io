---
import clsx from 'clsx';

interface Props {
  classes?: string;
  variant?: ButtonVariant;
  align?: ButtonAlign;
  href?: string;
  newTab?: boolean;
}

type ButtonAlign = 'left' | 'center' | 'right';
type ButtonVariant = 'primary' | 'dark';

const buttonVariantClasses: Record<ButtonVariant, string> = {
  primary: 'button-primary button__border',
  dark: 'button-dark button__border',
};

const buttonAlignClasses: Record<ButtonAlign, string> = {
  left: 'text-left',
  center: 'text-center',
  right: 'text-right',
};

const { classes, variant = 'primary', align = 'center', href, newTab = false, ...attributes } = Astro.props;

const allClass = clsx('button', buttonVariantClasses[variant], buttonAlignClasses[align]);
---

<div class={clsx(classes, 'button-wrapper')}>
  {href ? (
    <a href={href} class={allClass} target={newTab ? "_blank" : undefined} rel={newTab ? "noreferrer noopener" : undefined} {...attributes}>
      <slot />
    </a>
  ) : (
    <button class={allClass} {...attributes}>
      <slot />
    </button>
  )}
</div>

<style>
  .button-wrapper {
    @apply w-full sm:w-fit;
  }
  .button {
    @apply relative flex w-full justify-center rounded-[20px]  px-6 py-3 font-medium uppercase transition-colors;
  }

  .button-primary {
    @apply bg-yellow-300 text-black hover:bg-black hover:text-white;
  }

  .button__border {
    @apply border border-b-[3px] border-r-[3px] border-black;
  }

  :global(.dark) .button-primary{
    @apply bg-[#19122e] text-white hover:bg-yellow-300 hover:text-black;
  }

  :global(.dark) .button__border {
    @apply border border-b-[3px] border-r-[3px] border-gray-200 hover:border-yellow-300;
  }

  .button-dark {
    @apply bg-black text-white hover:bg-yellow-300 dark:bg-[#19122e] hover:text-black;
  }
</style>
